name: Build document & run tests
on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "develop"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_CLI_UI_LANGUAGE: en
  NUGET_CLI_LANGUAGE: en
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  NUGET_XMLDOC_MODE : skip
  MSBUILDLOGALLENVIRONMENTVARIABLES: true # Include all environment variables to binlog
defaults:
  run:
    shell: pwsh
jobs:
  # Single deploy job since we're just deploying
  build:
    timeout-minutes: 10
    strategy:
      matrix:
        os: [macos-latest, macos-14]
        dotnet: [
          { framework: 'net7.0', version: '7.0.406' },
        ]
    runs-on: ${{ matrix.os }}
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup .NET SDK
      - name: Setup .NET SDK
        id: setup-dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet.version }}

      # Create temporary `global.json`
      - name: Create temporary global.json
        run: |
          dotnet new globaljson --sdk-version ${{ steps.setup-dotnet.outputs.dotnet-version }} --force
      
      # Run `docfx metadata`
      - name: docfx metadata
        working-directory: docs
        run: |
          dotnet tool install docfx -g
          docfx metadata

      # Run `dotnet build`
      - name: Build
        working-directory: src
        run:  >
          dotnet build
          --configuration Release
          --no-restore
          --framework ${{ matrix.dotnet.framework }}
          --binaryLogger
          -clp:NoSummary
          --maxCPUCount
          --warnAsError

      # name: Run
      - name: Run
        working-directory: src/RoslynAnalysis
        run: |
          dotnet run
 
      - name: Delete temporary global.json
        if: ${{ always() }}
        run: |
          Remove-Item global.json -ErrorAction Ignore


